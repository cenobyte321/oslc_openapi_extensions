/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.constraints.*;
import org.eclipse.lyo.oslc4j.core.annotation.*;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
/**
 * Preview
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2020-05-01T14:16:00.487-05:00[America/Mexico_City]")public class Preview   {
  @JsonProperty("about")
  private String about = null;

  @JsonProperty("types")
  private List<String> types = null;

  @JsonProperty("extendedProperties")
  private Map<String, Object> extendedProperties = null;

  @JsonProperty("document")
  private String document = null;

  @JsonProperty("hintHeight")
  private String hintHeight = null;

  @JsonProperty("hintWidth")
  private String hintWidth = null;

  @JsonProperty("initialHeight")
  private String initialHeight = null;

  public Preview about(String about) {
    this.about = about;
    return this;
  }

  /**
   * Get about
   * @return about
   **/
  @JsonProperty("about")
  @Schema(description = "")
  public String getAbout() {
    return about;
  }

  public void setAbout(String about) {
    this.about = about;
  }

  public Preview types(List<String> types) {
    this.types = types;
    return this;
  }

  public Preview addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<String>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * Get types
   * @return types
   **/
  @JsonProperty("types")
  @Schema(description = "")
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }

  public Preview extendedProperties(Map<String, Object> extendedProperties) {
    this.extendedProperties = extendedProperties;
    return this;
  }

  public Preview putExtendedPropertiesItem(String key, Object extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new HashMap<String, Object>();
    }
    this.extendedProperties.put(key, extendedPropertiesItem);
    return this;
  }

  /**
   * Get extendedProperties
   * @return extendedProperties
   **/
  @JsonProperty("extendedProperties")
  @Schema(description = "")
  public Map<String, Object> getExtendedProperties() {
    return extendedProperties;
  }

  public void setExtendedProperties(Map<String, Object> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }

  public Preview document(String document) {
    this.document = document;
    return this;
  }

  /**
   * Get document
   * @return document
   **/
  @JsonProperty("document")
  @Schema(description = "")
  public String getDocument() {
    return document;
  }

  public void setDocument(String document) {
    this.document = document;
  }

  public Preview hintHeight(String hintHeight) {
    this.hintHeight = hintHeight;
    return this;
  }

  /**
   * Get hintHeight
   * @return hintHeight
   **/
  @JsonProperty("hintHeight")
  @Schema(description = "")
  public String getHintHeight() {
    return hintHeight;
  }

  public void setHintHeight(String hintHeight) {
    this.hintHeight = hintHeight;
  }

  public Preview hintWidth(String hintWidth) {
    this.hintWidth = hintWidth;
    return this;
  }

  /**
   * Get hintWidth
   * @return hintWidth
   **/
  @JsonProperty("hintWidth")
  @Schema(description = "")
  public String getHintWidth() {
    return hintWidth;
  }

  public void setHintWidth(String hintWidth) {
    this.hintWidth = hintWidth;
  }

  public Preview initialHeight(String initialHeight) {
    this.initialHeight = initialHeight;
    return this;
  }

  /**
   * Get initialHeight
   * @return initialHeight
   **/
  @JsonProperty("initialHeight")
  @Schema(description = "")
  public String getInitialHeight() {
    return initialHeight;
  }

  public void setInitialHeight(String initialHeight) {
    this.initialHeight = initialHeight;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Preview preview = (Preview) o;
    return Objects.equals(this.about, preview.about) &&
        Objects.equals(this.types, preview.types) &&
        Objects.equals(this.extendedProperties, preview.extendedProperties) &&
        Objects.equals(this.document, preview.document) &&
        Objects.equals(this.hintHeight, preview.hintHeight) &&
        Objects.equals(this.hintWidth, preview.hintWidth) &&
        Objects.equals(this.initialHeight, preview.initialHeight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, types, extendedProperties, document, hintHeight, hintWidth, initialHeight);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Preview {\n");
    
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    hintHeight: ").append(toIndentedString(hintHeight)).append("\n");
    sb.append("    hintWidth: ").append(toIndentedString(hintWidth)).append("\n");
    sb.append("    initialHeight: ").append(toIndentedString(initialHeight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
