/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.model.Preview;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.constraints.*;
import org.eclipse.lyo.oslc4j.core.annotation.*;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
/**
 * Compact
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2020-05-01T14:16:00.487-05:00[America/Mexico_City]")public class Compact   {
  @JsonProperty("about")
  private String about = null;

  @JsonProperty("types")
  private List<String> types = null;

  @JsonProperty("extendedProperties")
  private Map<String, Object> extendedProperties = null;

  @JsonProperty("icon")
  private String icon = null;

  @JsonProperty("largePreview")
  private Preview largePreview = null;

  @JsonProperty("shortTitle")
  private String shortTitle = null;

  @JsonProperty("smallPreview")
  private Preview smallPreview = null;

  @JsonProperty("title")
  private String title = null;

  public Compact about(String about) {
    this.about = about;
    return this;
  }

  /**
   * Get about
   * @return about
   **/
  @JsonProperty("about")
  @Schema(description = "")
  public String getAbout() {
    return about;
  }

  public void setAbout(String about) {
    this.about = about;
  }

  public Compact types(List<String> types) {
    this.types = types;
    return this;
  }

  public Compact addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<String>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * Get types
   * @return types
   **/
  @JsonProperty("types")
  @Schema(description = "")
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }

  public Compact extendedProperties(Map<String, Object> extendedProperties) {
    this.extendedProperties = extendedProperties;
    return this;
  }

  public Compact putExtendedPropertiesItem(String key, Object extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new HashMap<String, Object>();
    }
    this.extendedProperties.put(key, extendedPropertiesItem);
    return this;
  }

  /**
   * Get extendedProperties
   * @return extendedProperties
   **/
  @JsonProperty("extendedProperties")
  @Schema(description = "")
  public Map<String, Object> getExtendedProperties() {
    return extendedProperties;
  }

  public void setExtendedProperties(Map<String, Object> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }

  public Compact icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   **/
  @JsonProperty("icon")
  @Schema(description = "")
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }

  public Compact largePreview(Preview largePreview) {
    this.largePreview = largePreview;
    return this;
  }

  /**
   * Get largePreview
   * @return largePreview
   **/
  @JsonProperty("largePreview")
  @Schema(description = "")
  public Preview getLargePreview() {
    return largePreview;
  }

  public void setLargePreview(Preview largePreview) {
    this.largePreview = largePreview;
  }

  public Compact shortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
    return this;
  }

  /**
   * Get shortTitle
   * @return shortTitle
   **/
  @JsonProperty("shortTitle")
  @Schema(description = "")
  public String getShortTitle() {
    return shortTitle;
  }

  public void setShortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
  }

  public Compact smallPreview(Preview smallPreview) {
    this.smallPreview = smallPreview;
    return this;
  }

  /**
   * Get smallPreview
   * @return smallPreview
   **/
  @JsonProperty("smallPreview")
  @Schema(description = "")
  public Preview getSmallPreview() {
    return smallPreview;
  }

  public void setSmallPreview(Preview smallPreview) {
    this.smallPreview = smallPreview;
  }

  public Compact title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   **/
  @JsonProperty("title")
  @Schema(description = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Compact compact = (Compact) o;
    return Objects.equals(this.about, compact.about) &&
        Objects.equals(this.types, compact.types) &&
        Objects.equals(this.extendedProperties, compact.extendedProperties) &&
        Objects.equals(this.icon, compact.icon) &&
        Objects.equals(this.largePreview, compact.largePreview) &&
        Objects.equals(this.shortTitle, compact.shortTitle) &&
        Objects.equals(this.smallPreview, compact.smallPreview) &&
        Objects.equals(this.title, compact.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, types, extendedProperties, icon, largePreview, shortTitle, smallPreview, title);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Compact {\n");
    
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    largePreview: ").append(toIndentedString(largePreview)).append("\n");
    sb.append("    shortTitle: ").append(toIndentedString(shortTitle)).append("\n");
    sb.append("    smallPreview: ").append(toIndentedString(smallPreview)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
