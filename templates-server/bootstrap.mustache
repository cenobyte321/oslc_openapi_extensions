package {{apiPackage}};

import java.util.HashSet;
import java.util.Set;

import javax.annotation.PostConstruct;

import org.glassfish.jersey.server.ResourceConfig;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.ExitCodeGenerator;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

import io.swagger.v3.jaxrs2.integration.resources.OpenApiResource;

import org.eclipse.lyo.oslc4j.provider.jena.JenaProvidersRegistry;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.info.*;
import io.swagger.v3.oas.annotations.servers.*;

import javax.ws.rs.ApplicationPath;

@OpenAPIDefinition(
    info = @Info(
        title = "{{title}}",
        version = "{{version}}",
        description = "{{{appDescription}}}",
        termsOfService = "{{termsOfService}}",
        contact = @Contact(email = "{{infoEmail}}"),
        license = @License(
            name = "{{licenseInfo}}",
            url = "{{licenseUrl}}"
        )
    ),
    servers = @Server(url = "{{basePath}}")
)
@Configuration
@SpringBootApplication
@ApplicationPath("{{contextPath}}")
@ComponentScan(basePackages = { "{{modelPackage}}", "{{apiPackage}}" })
public class Bootstrap extends ResourceConfig implements CommandLineRunner {

    @Override
    public void run(String... arg0) throws Exception {
        if (arg0.length > 0 && arg0[0].equals("exitcode")) {
            throw new ExitException();
        }
    }

    public static void main(String[] args) throws Exception {
        new SpringApplication(Bootstrap.class).run(args);
    }

    @PostConstruct
    public void init() {
        registerClasses(JenaProvidersRegistry.getProviders());
        registerEndpoints();
        configureSwagger();
    }

    private void registerEndpoints() {
        packages("{{apiPackage}}");
    }

    private void configureSwagger() {
        OpenApiResource openApiResource = new OpenApiResource();
        Set<String> apiPackage = new HashSet<>();
        apiPackage.add("{{apiPackage}}");
        openApiResource.resourcePackages(apiPackage);
        register(openApiResource);
    }
    

    class ExitException extends RuntimeException implements ExitCodeGenerator {
        private static final long serialVersionUID = 1L;

        @Override
        public int getExitCode() {
            return 10;
        }

    }

}