package {{package}}.impl;

import {{package}}.*;
{{#hasModel}}import {{modelPackage}}.*;{{/hasModel}}

{{#imports}}import {{import}};
{{/imports}}

import java.net.URI;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import {{package}}.NotFoundException;

import java.io.InputStream;
import java.net.URISyntaxException;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;

import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.model.*;

import javax.servlet.http.HttpServletResponse;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
{{#useBeanValidation}}
import javax.validation.constraints.*;
{{/useBeanValidation}}
{{>generatedAnnotation}}
{{#operations}}
public class {{classname}}ServiceImpl extends {{classname}}Service {
    {{#operation}}
    {{#contents}}
    @Override
    public Response {{nickname}}({{#parameters}}{{>serviceQueryParams}}{{>servicePathParams}}{{>serviceHeaderParams}}{{>serviceBodyParams}}{{>serviceFormParams}}{{>serviceCookieParams}}, {{/parameters}}SecurityContext securityContext) throws NotFoundException {
        {{#vendorExtensions.x-OSLC-ResourceShapeEndpoint}}
        {{>oslcResourceShapeEndpointApiImpl}}
        {{/vendorExtensions.x-OSLC-ResourceShapeEndpoint}}
        {{^vendorExtensions.x-OSLC-ResourceShapeEndpoint}}
            {{#vendorExtensions.x-OSLC-ServiceProvider}}
        ServiceProvider provider = new ServiceProvider();
        String pathBaseName = "{{baseName}}/";
        Publisher publisher = new Publisher("{{publisher.title}}", "{{publisher.id}}");
        Class<?>[] services = new Class[]{
        {{#services}}
        {{this}}Api.class,
        {{/services}}
        };
        Map<String, Object> paramValues = new HashMap<>();
        {{#parameters}}
        paramValues.put("{{paramName}}", {{paramName}});
        {{/parameters}}

        try {
            provider = ServiceProviderFactory.createServiceProvider(
                    "{{basePath}}",
                    "{{basePath}}",
                    "{{this.title}}",
                    "{{this.description}}",
                    publisher,
                    services,
                    {{#parameters}}
                    paramValues);
            provider.setAbout(URI.create("{{basePath}}/" + pathBaseName + {{paramName}}));
                    {{/parameters}}
                    {{^parameters}}
                    );
            provider.setAbout(URI.create("{{basePath}}/" + {{baseName}}));
                    {{/parameters}}
        } catch (URISyntaxException e) {
            e.printStackTrace();
        } catch (OslcCoreApplicationException e) {
            e.printStackTrace();
        }
        return Response.ok().entity(provider).build();
            {{/vendorExtensions.x-OSLC-ServiceProvider}}
            {{^vendorExtensions.x-OSLC-ServiceProvider}}
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
            {{/vendorExtensions.x-OSLC-ServiceProvider}}


        {{/vendorExtensions.x-OSLC-ResourceShapeEndpoint}}
    }
    {{/contents}}
    {{/operation}}
}
{{/operations}}
