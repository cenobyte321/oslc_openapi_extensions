package {{package}}.impl;

import {{package}}.*;
{{#hasModel}}import {{modelPackage}}.*;{{/hasModel}}

{{#imports}}import {{import}};
{{/imports}}

import java.net.URI;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import {{package}}.NotFoundException;

import java.io.InputStream;
import java.net.URISyntaxException;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;

import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.model.*;

import javax.servlet.http.HttpServletResponse;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
{{#useBeanValidation}}
import javax.validation.constraints.*;
{{/useBeanValidation}}
{{>generatedAnnotation}}
{{#operations}}
public class {{classname}}ServiceImpl extends {{classname}}Service {
    {{#operation}}
    {{#contents}}
    @Override
    public Response {{nickname}}({{#parameters}}{{>serviceQueryParams}}{{>servicePathParams}}{{>serviceHeaderParams}}{{>serviceBodyParams}}{{>serviceFormParams}}{{>serviceCookieParams}}, {{/parameters}}SecurityContext securityContext) throws NotFoundException {
        {{#vendorExtensions.x-OSLC-ResourceShapeEndpoint}}
        {{>oslcResourceShapeEndpointApiImpl}}
        {{/vendorExtensions.x-OSLC-ResourceShapeEndpoint}}
        {{^vendorExtensions.x-OSLC-ResourceShapeEndpoint}}
            {{#vendorExtensions.x-OSLC-ServiceProvider}}
        {{>oslcServiceProviderApiImpl}}
            {{/vendorExtensions.x-OSLC-ServiceProvider}}
            {{^vendorExtensions.x-OSLC-ServiceProvider}}
        // do some magic!
        return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
            {{/vendorExtensions.x-OSLC-ServiceProvider}}


        {{/vendorExtensions.x-OSLC-ResourceShapeEndpoint}}
    }
    {{/contents}}
    {{/operation}}
}
{{/operations}}
